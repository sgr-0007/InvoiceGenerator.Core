@using System.Globalization
@model InvoiceGenerator.Core.Contracts.Invoice

@{
    // Create a culture info based on the invoice's currency code or default to en-US
    string cultureName = "en-US";
    switch (Model.CurrencyCode?.ToUpper() ?? "USD")
    {
        case "EUR": cultureName = "fr-FR"; break; // Euro
        case "GBP": cultureName = "en-GB"; break; // British Pound
        case "JPY": cultureName = "ja-JP"; break; // Japanese Yen
        case "CAD": cultureName = "en-CA"; break; // Canadian Dollar
        default: cultureName = "en-US"; break;    // US Dollar
    }
    
    IFormatProvider cultureInfo = CultureInfo.CreateSpecificCulture(cultureName);
    var formatSubtotal = Model.Subtotal.ToString("C", cultureInfo);
    var formatTax = Model.TaxAmount.ToString("C", cultureInfo);
    var formatTotal = Model.Total.ToString("C", cultureInfo);
}

<script src="https://cdn.tailwindcss.com"></script>

<div class="min-w-7xl flex flex-col bg-gray-200 space-y-4 p-10">
    <h1 class="text-2xl font-semibold">Invoice #@Model.Number</h1>
    <p>Issued date: @Model.IssuedDate</p>
        <p>Due date:   @Model.DueDate</p>

    @foreach (var field in Model.CustomFields)
    {
        <p><span class="font-medium">@field.Key:</span> @field.Value</p>
    }

    <div class="flex justify-between space-x-4">
        <div class="bg-gray-100 rounded-lg p-4 w-1/2">
            <p class="font-medium">Seller:</p>
            <p>@Model.SellerAddress.CompanyName</p>
            <p>@Model.SellerAddress.Street</p>
            <p>@Model.SellerAddress.City, @Model.SellerAddress.State</p>
            <p>@Model.SellerAddress.Email</p>
        </div>
        <div class="bg-gray-100 rounded-lg p-4 w-1/2">
            <p class="font-medium">Bill to:</p>
            <p>@Model.CustomerAddress.CompanyName</p>
            <p>@Model.CustomerAddress.Street</p>
            <p>@Model.CustomerAddress.City, @Model.CustomerAddress.State</p>
            <p>@Model.CustomerAddress.Email</p>
        </div>
    </div>

    <div class="bg-white rounded-lg p-4 space-y-2">
        <h2 class="text-xl font-medium">Items</h2>
        <div class="grid grid-cols-4 font-medium border-b pb-2">
            <div>#</div><div>Name</div><div>Price</div><div>Qty</div>
        </div>
        @foreach (var (item, i) in Model.LineItems.Select((li, idx) => (li, idx+1)))
        {
            <div class="grid grid-cols-4 py-1">
                <div>@i</div>
                <div>@item.Name</div>
                <div>@item.Price.ToString("C", cultureInfo)</div>
                <div>@item.Quantity</div>
            </div>
        }
    </div>

    <div class="flex justify-end space-x-8">
        <div>Subtotal:</div>
        <div>@formatSubtotal</div>
    </div>
    
    @if (Model.TaxRate > 0)
    {
        <div class="flex justify-end space-x-8">
            <div>Tax (@Model.TaxRate.ToString("0.##")%):</div>
            <div>@formatTax</div>
        </div>
    }
    
    <div class="flex justify-end space-x-8 font-semibold">
        <div>Total:</div>
        <div>@formatTotal</div>
    </div>
    
    @if (!string.IsNullOrEmpty(Model.Notes))
    {
        <div class="mt-6 p-4 bg-gray-100 rounded-lg">
            <h3 class="font-medium">Notes:</h3>
            <p>@Model.Notes</p>
        </div>
    }
</div>
